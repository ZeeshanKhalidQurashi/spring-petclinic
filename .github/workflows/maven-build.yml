name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Check for Git
        run: |
          if ! command -v git &> /dev/null; then
              echo "Git not found, installing..."
              sudo apt-get update
              sudo apt-get install -y git
          else
              echo "Git is already installed."
          fi

      - name: Check for Maven
        run: |
          if ! command -v mvn &> /dev/null; then
              echo "Maven not found, installing..."
              sudo apt-get update
              sudo apt-get install -y maven
          else
              echo "Maven is already installed."
          fi

      - name: Validate Installation
        run: |
          echo "Validating installation..."
          command -v git
          command -v mvn

  build:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Ensure Java 19 is active
        run: |
          echo "Checking Java version..."
          java -version
          echo "JAVA_HOME is $JAVA_HOME"
      
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build with Maven
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-19-openjdk-amd64
          export PATH=$JAVA_HOME/bin:$PATH
          ./mvnw -B package

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Verify JAR file
        run: |
          echo "Verifying JAR file presence..."
          ls -al /home/ibtahaj/spring-petclinic/target/
          if [ -z "$(find /home/ibtahaj/spring-petclinic/target/ -name 'spring-petclinic-3.3.0-SNAPSHOT.jar')" ]; then
            echo "JAR file not found in target directory!"
            exit 1
          fi
    
      - name: Check ssh-keyscan
        run: which ssh-keyscan || echo "ssh-keyscan not found"
    
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_SERVER: '103.151.111.190'
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Scanning for SSH key..."
          ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts || true
          echo "Known hosts content:"
          cat ~/.ssh/known_hosts
          echo "SSH setup complete."
    
      - name: Deploy application
        env:
          DEPLOY_SERVER: '103.151.111.190'
          DEPLOY_USER: 'ibtahaj'
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Deploying application to $DEPLOY_SERVER"
          scp -i ~/.ssh/id_rsa /home/ibtahaj/spring-petclinic/target/spring-petclinic-3.3.0-SNAPSHOT.jar $DEPLOY_USER@$DEPLOY_SERVER:/home/ibtahaj/spring-petclinic/
          ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER "nohup java -jar /home/ibtahaj/spring-petclinic/target/spring-petclinic-3.3.0-SNAPSHOT.jar > /dev/null 2>&1 &"
          rm -f ~/.ssh/id_rsa
                      
      - name: Wait for application to start
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -s http://103.151.111.190:8080 > /dev/null; then
              echo "Application is up!"
              break
            else
              echo "Application is not up yet, retrying in 10 seconds..."
              sleep 10
            fi
          done

  test:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Check application URL
        run: |
          echo "Checking application URL"
          curl -s http://103.151.111.190:8080 || exit 1
  
      - name: Run tests
        run: ./mvnw test
